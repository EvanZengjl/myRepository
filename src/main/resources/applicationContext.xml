<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop" 
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:oscache="http://www.springmodules.org/schema/oscache"
  xmlns:jpa="http://www.springframework.org/schema/data/jpa"
  xmlns:cache="http://www.springframework.org/schema/cache"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
   	 http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
   	 http://www.springframework.org/schema/context
   	 http://www.springframework.org/schema/context/spring-context-4.0.xsd 
   	 http://www.springframework.org/schema/aop 
   	 http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
   	 http://www.springframework.org/schema/tx 
   	 http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
   	 http://www.springmodules.org/schema/oscache 
   	 http://www.springmodules.org/schema/cache/springmodules-oscache.xsd
   	 http://www.springframework.org/schema/data/jpa 
   	 http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
   	 http://www.springframework.org/schema/cache
   	 http://www.springframework.org/schema/cache/spring-cache.xsd">

  <context:annotation-config/>
 <!--  <cache:annotation-driven/> -->
  <!-- 扫描包 -->
  <context:component-scan base-package="com.evan.lms.service"/>
  <context:component-scan base-package="com.evan.lms.config"/> 
  
  <!-- 支持注解方式声明式事务 -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
  
  <!-- 配置jdbc -->
  <bean class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
    <property name="locations">
      <value>classpath:jdbc.properties</value>
    </property>
  </bean>
  <!-- 配置數據源 -->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driver}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
    <!-- 连接池启动时的初始值 -->
  </bean>
 
  <!-- 自定义Realm -->
	<bean id="myRealm" class="com.evan.lms.realm.MyRealm"/>  
	
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
  	  <property name="realm" ref="myRealm"/>  
	</bean>  
	
	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	   <!--  Shiro的核心安全接口,这个属性是必须的   -->
	    <property name="securityManager" ref="securityManager"/>
	   <!--  身份认证失败，则跳转到登录页面的配置   -->
	    <property name="loginUrl" value="/index.jsp"/>
	   <!--  权限认证失败，则跳转到指定页面   -->
	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/>  
	    <!-- Shiro连接约束配置,即过滤链的定义   -->
	    <property name="filterChainDefinitions">  
	        <value>  
	             /login=anon
				 /admin=authc
				 /news=roles[2]
				
	        </value>  
	    </property>
	</bean>  
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	
	<!-- 开启Shiro注解 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
  		<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
  	  <property name="securityManager" ref="securityManager"/>  
    </bean>
    
    
    <!-- 配置 JPA 的 EntityManagerFactory -->  
    <bean id="entityManagerFactory"  
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="packagesToScan" value="com.evan.lms.entity"></property>  
       <!--  <property name="persistenceProvider">
            <bean class="org.hibernate.ejb.HibernatePersistence" />
        </property> -->
        
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        
       <!--  <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
            	<property name="database" value="MYSQL" />
                <property name="generateDdl" value="false" />
                 <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" /> 
                 <property name="showSql" value="true" />
            </bean>
        </property> -->
        <!-- <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
        </property> -->
        <property name="jpaProperties">  
            <props>  
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
                <prop key="hibernate.show_sql">true</prop>  
                <prop key="hibernate.format_sql">true</prop>  
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>  
                  
                <!-- <prop key="hibernate.cache.use_second_level_cache">false</prop>  
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>  
                <prop key="hibernate.cache.use_query_cache">false</prop>  --> 
            </props>  
        </property>  
      <!--   <property name="sharedCacheMode" value="ENABLE_SELECTIVE"></property>   -->
    </bean>  
    <!-- Hibernate对Jpa的实现 -->
   	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
   		<property name="database" value="MYSQL" />
   	</bean>
        
 
   <!--配置 transactionManager事物管理 -->
   
   	<bean id="transactionManager"  
        class="org.springframework.orm.jpa.JpaTransactionManager">  
        <property name="entityManagerFactory" ref="entityManagerFactory"></property>      
    </bean>
   
	<!--  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"/>
	 </bean> -->
	 
	 
  
  
  <!-- Spring AOP config配置切点 -->  
  <aop:config>
    <aop:pointcut expression="execution(* com.evan.lms.service.*.*(..))" id="bussinessService" />
    <aop:advisor advice-ref="txAdvice" pointcut-ref="bussinessService"/>
  </aop:config>

  <!-- 配置那个类那个方法用到事务处理 -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="get*" read-only="true"/>
      <tx:method name="add*" propagation="REQUIRED"/>
      <tx:method name="update*" propagation="REQUIRED"/>
      <tx:method name="delete*" propagation="REQUIRED"/>
      <tx:method name="find*" propagation="REQUIRED"/>
      <tx:method name="*" propagation="REQUIRED"/>
    </tx:attributes>
  </tx:advice>
  
  <!-- 配置 SpringData -->  
    <jpa:repositories base-package="com.evan.lms.dao"  
        entity-manager-factory-ref="entityManagerFactory"></jpa:repositories>  
  
  <!-- 配置支持基于注解的事务 -->  
    <tx:annotation-driven transaction-manager="transactionManager"/>  
      
      
      
    <!-- <import resource="classpath:redisConfig.xml"/> -->
  
   
</beans>